from random import randint
from asyncio import sleep

from aiogram import Router, F
from aiogram.exceptions import TelegramRetryAfter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from .config import (DEFAULT_FIELD_SIZE,
                     MIN_FIELD_SIZE,
                     MAX_FIELD_SIZE,
                     DEFAULT_WIN_CONDITION,
                     MIN_ITEMS_PER_FIELD,
                     MAX_ITEMS_PER_FIELD)
from .session import GameSession
from .session_manager import get_session, set_session, del_session, has_session
from features.findgame.utils import dice_emoji, are_markups_different
from features.findgame.logic import (start_turn_timer,
                                     append_to_dice_log,
                                     append_multiple_to_dice_log,
                                     generate_scoreboard)
from features.findgame.board import build_field_keyboard


router = Router()

@router.message(Command("findgame", "fg", "findgame3", "findgame4", "findgame5", "findgame6"))
async def handle_findgame(msg: Message):
    print("[DEBUG] handle_findgame –≤—ã–∑–≤–∞–Ω")

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    field_size = DEFAULT_FIELD_SIZE
    win_condition = DEFAULT_WIN_CONDITION

    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é
    full_text = msg.text.lstrip("/")  # —É–±–∏—Ä–∞–µ–º —Å–ª—ç—à
    command_part, _, args_part = full_text.partition(" ")

    # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /findgame5)
    if command_part.startswith("findgame") and command_part != "findgame":
        try:
            field_size = int(command_part.replace("findgame", ""))
        except ValueError:
            pass

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    if args_part:
        try:
            tokens = list(map(int, args_part.strip().split()))
            if len(tokens) >= 1:
                field_size = tokens[0]
            if len(tokens) >= 2:
                win_condition = tokens[1]
        except ValueError:
            pass

    # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
    field_size = max(MIN_FIELD_SIZE, min(MAX_FIELD_SIZE, field_size))

    chat_id = msg.chat.id
    user_id = msg.from_user.id
    username = msg.from_user.username

    if has_session(chat_id):
        await msg.answer("‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
        return

    session = GameSession(chat_id, field_size, win_condition)
    set_session(chat_id, session)
    session.add_player(user_id, username)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–æ –±–µ–∑ –ø–æ–ª—è
    sent_msg = await msg.answer(
        f"üîç –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã!\n–ü–æ–ª–µ: {field_size}√ó{field_size}\n"
        f"–ü–æ–±–µ–¥–∞ –ø—Ä–∏ {win_condition} –Ω–∞—Ö–æ–¥–∫–∞—Ö",
        reply_markup=build_control_keyboard(session)
    )

    session.field_message_id = sent_msg.message_id


def build_control_keyboard(session: GameSession) -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="fg:join"),
            InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏", callback_data="fg:leave")
        ]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤
    if len(session.players) >= 2:
        keyboard.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="fg:start")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data.in_({"fg:join", "fg:leave", "fg:start", "fg:giveup"}))
async def handle_control_buttons(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    username = callback.from_user.username or callback.from_user.full_name or "–ò–≥—Ä–æ–∫"

    session = get_session(chat_id)
    if not session:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    action = callback.data

    if action == "fg:join":
        if session.add_player(user_id, username):
            await callback.answer("‚úÖ –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.")
        else:
            await callback.answer("‚ö†Ô∏è –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")

    elif action == "fg:leave":
        if any(p.user_id == user_id for p in session.players):
            session.remove_player(user_id)
            await callback.answer("üö™ –¢—ã –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.")
        else:
            await callback.answer("‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ.")

    elif action == "fg:start":
        if session.players[0].user_id != user_id:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
            return
        if len(session.players) < 2:
            await callback.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.")
            return

        session.started = True

        # üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
        dice_rolls = {}
        used_totals = set()
        for player in session.players:
            while True:
                d1, d2 = randint(1, 6), randint(1, 6)
                total = d1 + d2
                if total not in used_totals:
                    used_totals.add(total)
                    dice_rolls[player.user_id] = (total, d1, d2)
                    break

        session.players.sort(key=lambda p: dice_rolls[p.user_id][0], reverse=True)
        session.dice_rolls = dice_rolls

        roll_texts = []
        for player in session.players:
            _, d1, d2 = dice_rolls[player.user_id]
            roll_texts.append(f"{player.display_name}: {dice_emoji(d1)}{dice_emoji(d2)}")

        dice_msg = await callback.message.answer("üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤:\n" + "\n".join(roll_texts))
        session.dice_message_id = dice_msg.message_id

        # üß† –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–µ, —á—Ç–æ–±—ã grid —É–∂–µ –±—ã–ª –≥–æ—Ç–æ–≤
        session.generate_field(min_items=MIN_ITEMS_PER_FIELD, max_items=MAX_ITEMS_PER_FIELD)

        # üéØ –¢–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–µ ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
        await callback.bot.edit_message_text(
            chat_id=session.chat_id,
            message_id=session.field_message_id,
            text=f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–•–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: {session.get_current_player().username}",
            reply_markup=build_field_keyboard(session)
        )

        # üßæ –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –ª–æ–≥
        await append_to_dice_log(callback.bot, session,
                                 f"üîÅ –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {session.get_current_player().username}")

        await sleep(0.3)
        await callback.answer("üöÄ –ü–æ–µ—Ö–∞–ª–∏!")
        session.cancel_afk_timer()
        await start_turn_timer(callback.bot, session)
        return

    elif action == "fg:giveup":
        if not session.started:
            await callback.answer("‚ùå –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
            return

        player = next((p for p in session.players if p.user_id == user_id), None)
        if not player:
            await callback.answer("‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å.")
            return

        session.remove_player(user_id)
        await append_to_dice_log(callback.bot, session,
                                 f"üè≥Ô∏è –ò–≥—Ä–æ–∫ {player.display_name} —Å–¥–∞–ª—Å—è –∏ –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã.")

        if len(session.players) == 1:
            winner = session.players[0]
            await sleep(0.3)
            await append_to_dice_log(callback.bot, session,
                                     f"üèÜ –ü–æ–±–µ–¥–∏–ª {winner.username}, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–±—ã–ª–∏!")
            del_session(chat_id)
            return

        elif session.get_current_player().user_id == user_id:
            session.cancel_afk_timer()
            session.advance_turn()
            await append_to_dice_log(callback.bot, session,
                                     f"üîÅ –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {session.get_current_player().username}")
            await start_turn_timer(callback.bot, session)

        await callback.message.edit_reply_markup(reply_markup=build_field_keyboard(session))
        await callback.answer("üò¢ –¢—ã —Å–¥–∞–ª—Å—è.")
        return

    # üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å)
    if not session.started:
        new_markup = build_control_keyboard(session)
        if not callback.message.reply_markup or are_markups_different(callback.message.reply_markup, new_markup):
            try:
                await callback.message.edit_reply_markup(reply_markup=new_markup)
            except Exception as e:
                print(f"[control_buttons] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")


@router.callback_query(F.data.startswith("fg:"))
async def handle_click(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id

    session = get_session(chat_id)
    if not session:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!", show_alert=True)
        return

    player = session.get_current_player()
    if not player or player.user_id != user_id:
        await callback.answer("‚è≥ –°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!", show_alert=True)
        return

    if callback.data == "fg:noop":
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    try:
        _, x_str, y_str = callback.data.split(":")
        x, y = int(x_str), int(y_str)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!", show_alert=True)
        return
    session.cancel_afk_timer()
    result = session.click_cell(x, y)
    if result == "already_opened":
        await callback.answer("‚õî –≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!", show_alert=True)

        # –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∏ –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        session.advance_turn()
        await start_turn_timer(callback.bot, session)
        await append_to_dice_log(callback.bot, session,
                                 f"üö´ {player.display_name} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–ª–µ—Ç–∫—É. –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç.")

        new_markup = build_field_keyboard(session)
        if are_markups_different(callback.message.reply_markup, new_markup):
            try:
                await callback.message.edit_reply_markup(reply_markup=new_markup)
            except TelegramRetryAfter as e:
                print(f"[edit_reply_markup] Flood control: wait {e.retry_after}s")
        return
    log_lines = []

    if result == "found":
        log_lines.append(f"‚úÖ {player.display_name} –Ω–∞—à—ë–ª –ø—Ä–µ–¥–º–µ—Ç!")
    elif result == "special":
        log_lines.append(f"üåü {player.display_name} –Ω–∞—à—ë–ª **–æ—Å–æ–±—ã–π –ø—Ä–µ–¥–º–µ—Ç** –∏ –ü–û–ë–ï–î–ò–õ!")
    else:
        log_lines.append(f"‚ùå {player.display_name} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è.")

    winner = session.check_win()
    if winner:
        log_lines.append(f"üèÜ –ü–æ–±–µ–¥–∏–ª {winner.username} —Å {winner.score} –æ—á–∫–∞–º–∏!")
        scoreboard = generate_scoreboard(session)
        log_lines.append(scoreboard)
        await append_multiple_to_dice_log(callback.bot, session, log_lines)
        del_session(chat_id)
    else:
        session.advance_turn()
        await start_turn_timer(callback.bot, session)
        log_lines.append(f"üîÅ –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {session.get_current_player().username}")
        await append_multiple_to_dice_log(callback.bot, session, log_lines)

    new_markup = build_field_keyboard(session)
    if not callback.message.reply_markup or are_markups_different(callback.message.reply_markup, new_markup):
        try:
            await callback.message.edit_reply_markup(reply_markup=new_markup)
        except TelegramRetryAfter as e:
            print(f"[edit_reply_markup] Flood control: wait {e.retry_after}s")

    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

