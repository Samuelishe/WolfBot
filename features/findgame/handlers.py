from random import randint

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.filters.command import CommandObject
from .config import (DEFAULT_FIELD_SIZE,
                     MIN_FIELD_SIZE,
                     MAX_FIELD_SIZE,
                     DEFAULT_WIN_CONDITION,
                     MIN_ITEMS_PER_FIELD,
                     MAX_ITEMS_PER_FIELD,
                     EMOJI_CLOSED,
                     EMOJI_EMPTY,
                     EMOJI_ITEM,
                     EMOJI_SPECIAL)
from .session import GameSession
from .session_manager import get_session, set_session, del_session, has_session
from features.findgame.logic import start_turn_timer
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


router = Router()

@router.message(Command(commands=["findgame", "fg", "findgame3", "findgame4", "findgame5", "findgame6"]))
async def handle_findgame(msg: Message, command: CommandObject):
    if command is None:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.")
        return

    cmd = command.command
    args = command.args

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    field_size = DEFAULT_FIELD_SIZE
    win_condition = DEFAULT_WIN_CONDITION

    # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /findgame5)
    if cmd.startswith("findgame") and cmd != "findgame":
        try:
            field_size = int(cmd.replace("findgame", ""))
        except ValueError:
            pass

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    if args:
        try:
            tokens = list(map(int, args.strip().split()))
            if len(tokens) >= 1:
                field_size = tokens[0]
            if len(tokens) >= 2:
                win_condition = tokens[1]
        except ValueError:
            pass

    # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
    field_size = max(MIN_FIELD_SIZE, min(MAX_FIELD_SIZE, field_size))

    chat_id = msg.chat.id
    user_id = msg.from_user.id
    username = msg.from_user.username

    if has_session(chat_id):
        await msg.answer("‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
        return

    session = GameSession(chat_id, field_size, win_condition)
    set_session(chat_id, session)
    session.add_player(user_id, username)

    sent_msg = await msg.answer(
        f"üîç –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã!\n–ü–æ–ª–µ: {field_size}√ó{field_size}\n"
        f"–ü–æ–±–µ–¥–∞ –ø—Ä–∏ {win_condition} –Ω–∞—Ö–æ–¥–∫–∞—Ö",
        reply_markup=build_field_keyboard(session)
    )

    session.field_message_id = sent_msg.message_id

def build_field_keyboard(session: GameSession) -> InlineKeyboardMarkup:
    keyboard = []

    for y in range(session.field_size):
        row = []
        for x in range(session.field_size):
            if (x, y) not in session.opened_cells:
                emoji = EMOJI_CLOSED
                callback_data = f"fg:{x}:{y}"
            else:
                cell = session.grid[y][x]
                if cell == "item":
                    emoji = EMOJI_ITEM
                elif cell == "special":
                    emoji = EMOJI_SPECIAL
                else:
                    emoji = EMOJI_EMPTY
                callback_data = "fg:noop"  # –Ω–∞–∂–∏–º–∞—Ç—å –Ω–µ–ª—å–∑—è

            row.append(InlineKeyboardButton(
                text=emoji,
                callback_data=callback_data
            ))
        keyboard.append(row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def build_control_keyboard(session: GameSession, user_id: int) -> InlineKeyboardMarkup:
    buttons = []

    if session.started:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè≥Ô∏è –°–¥–∞—Ç—å—Å—è", callback_data="fg:giveup")]
        ])

    if user_id not in [p.user_id for p in session.players]:
        buttons.append([InlineKeyboardButton(text="üë§ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="fg:join")])
    else:
        buttons.append([InlineKeyboardButton(text="‚ùå –ü–æ–∫–∏–Ω—É—Ç—å", callback_data="fg:leave")])
        if user_id == session.players[0].user_id and len(session.players) >= 2:
            buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="fg:start")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data.in_({"fg:join", "fg:leave", "fg:start", "fg:giveup"}))
async def handle_control_buttons(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    username = callback.from_user.username or callback.from_user.full_name or "–ò–≥—Ä–æ–∫"

    session = get_session(chat_id)
    if not session:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if callback.data == "fg:join":
        if session.add_player(user_id, username):
            await callback.answer("‚úÖ –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.")
        else:
            await callback.answer("‚ö†Ô∏è –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")

    elif callback.data == "fg:leave":
        if any(p.user_id == user_id for p in session.players):
            session.remove_player(user_id)
            await callback.answer("üö™ –¢—ã –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.")
        else:
            await callback.answer("‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ.")

    elif callback.data == "fg:start":
        if session.players[0].user_id != user_id:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
            return
        if len(session.players) < 2:
            await callback.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.")
            return
        session.started = True

        #–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
        dice_rolls = {}
        used_totals = set()

        for player in session.players:
            while True:
                dice1 = randint(1, 6)
                dice2 = randint(1, 6)
                total = dice1 + dice2
                if total not in used_totals:
                    used_totals.add(total)
                    dice_rolls[player.user_id] = (total, dice1, dice2)
                    break

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—É–º–º–µ –±—Ä–æ—Å–∫–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        session.players.sort(key=lambda p: dice_rolls[p.user_id][0], reverse=True)

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –±—Ä–æ—Å–∫–∞–º–∏
        roll_messages = []
        for player in session.players:
            _, d1, d2 = dice_rolls[player.user_id]
            roll_text = f"{player.display_name}: {dice_emoji(d1)}{dice_emoji(d2)}"
            roll_messages.append(roll_text)

        await callback.message.answer("üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤:\n" + "\n".join(roll_messages))

        #–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è
        session.generate_field(min_items=MIN_ITEMS_PER_FIELD, max_items=MAX_ITEMS_PER_FIELD)
        await callback.message.edit_text(
            f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–•–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: {session.get_current_player().username}",
            new_markup = build_field_keyboard(session)
        )
        await callback.answer("üöÄ –ü–æ–µ—Ö–∞–ª–∏!")
        await start_turn_timer(callback.bot, session)

    elif callback.data == "fg:giveup":
        if not session.started:
            await callback.answer("‚ùå –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
            return

        player = next((p for p in session.players if p.user_id == user_id), None)
        if not player:
            await callback.answer("‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å.")
            return

        session.remove_player(user_id)
        await callback.message.answer(f"üè≥Ô∏è –ò–≥—Ä–æ–∫ {player.display_name} —Å–¥–∞–ª—Å—è –∏ –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã.")

        if len(session.players) == 1:
            winner = session.players[0]
            await callback.message.answer(f"üèÜ –ü–æ–±–µ–¥–∏–ª {winner.username}, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–±—ã–ª–∏!")
            del_session(chat_id)

        elif session.get_current_player().user_id == user_id:
            session.advance_turn()
            await start_turn_timer(callback.bot, session)
            await callback.message.answer(f"üîÅ –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {session.get_current_player().username}")

        session.generate_field(min_items=MIN_ITEMS_PER_FIELD, max_items=MAX_ITEMS_PER_FIELD)
        new_markup = build_field_keyboard(session)
        await callback.message.edit_reply_markup(reply_markup=new_markup)
        await callback.answer("üò¢ –¢—ã —Å–¥–∞–ª—Å—è.")

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å
    if not session.started:
        control_markup = build_control_keyboard(session, user_id)
        await callback.message.edit_reply_markup(reply_markup=control_markup)


@router.callback_query(F.data.startswith("fg:"))
async def handle_click(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id

    session = get_session(chat_id)
    if not session:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!", show_alert=True)
        return

    player = session.get_current_player()
    if not player or player.user_id != user_id:
        await callback.answer("‚è≥ –°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!", show_alert=True)
        return

    if callback.data == "fg:noop":
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    try:
        _, x_str, y_str = callback.data.split(":")
        x, y = int(x_str), int(y_str)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!", show_alert=True)
        return

    result = session.click_cell(x, y)
    if result == "already_opened":
        await callback.answer("‚õî –≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!", show_alert=True)
        return
    if result == "found":
        await callback.message.answer(f"‚úÖ {player.display_name} –Ω–∞—à—ë–ª –ø—Ä–µ–¥–º–µ—Ç!")
    elif result == "special":
        await callback.message.answer(f"üåü {player.display_name} –Ω–∞—à—ë–ª **–æ—Å–æ–±—ã–π –ø—Ä–µ–¥–º–µ—Ç** –∏ –ü–û–ë–ï–î–ò–õ!")
    else:
        await callback.message.answer(f"‚ùå {player.display_name} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è.")

    winner = session.check_win()
    if winner:
        await callback.message.answer(f"üèÜ –ü–æ–±–µ–¥–∏–ª {winner.username} —Å {winner.score} –æ—á–∫–∞–º–∏!")
        del_session(chat_id)

    else:
        session.advance_turn()
        await start_turn_timer(callback.bot, session)
        await callback.message.answer(f"üîÅ –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {session.get_current_player().username}")

    # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–µ (–≤—Å–µ–≥–¥–∞!)
    session.generate_field(min_items=MIN_ITEMS_PER_FIELD, max_items=MAX_ITEMS_PER_FIELD)
    new_markup = build_field_keyboard(session)
    await callback.message.edit_reply_markup(reply_markup=new_markup)

    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

def dice_emoji(value: int) -> str:
    return {
        1: "‚öÄ", 2: "‚öÅ", 3: "‚öÇ", 4: "‚öÉ", 5: "‚öÑ", 6: "‚öÖ"
    }.get(value, "?")