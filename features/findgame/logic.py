from features.findgame.session import GameSession
from features.findgame.board import build_field_keyboard
from features.findgame.utils import dice_emoji
from .config import AFK_TIMEOUT, AFK_LIMIT
from aiogram import Bot
from asyncio import sleep, create_task  # —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from aiogram.exceptions import TelegramRetryAfter

async def start_turn_timer(bot: Bot, session: GameSession):
    current = session.get_current_player()
    initial_turn = session.current_turn_index
    user_id = current.user_id
    chat_id = session.chat_id

    async def timer():
        await sleep(AFK_TIMEOUT)

        # –ò–≥—Ä–æ–∫ —É–∂–µ –ø–æ—Ö–æ–¥–∏–ª ‚Äî —Ç–∞–π–º–µ—Ä —É—Å—Ç–∞—Ä–µ–ª
        if not session.started or session.current_turn_index != initial_turn:
            return

        session.afk_counters[user_id] += 1

        if session.afk_counters[user_id] >= AFK_LIMIT:
            session.remove_player(user_id)
            await bot.send_message(chat_id, f"üí§ {current.username} –ø—Ä–æ–ø—É—Å—Ç–∏–ª {AFK_LIMIT} —Ö–æ–¥–∞ –∏ –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã!")

            if len(session.players) == 1:
                winner = session.players[0]
                await bot.send_message(chat_id, f"üèÜ –ü–æ–±–µ–¥–∏–ª {winner.username}, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–±—ã–ª–∏!")
                return

            session.advance_turn()
        else:
            await bot.send_message(chat_id, f"‚è≥ {current.username} –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ–¥ "
                                            f"({session.afk_counters[user_id]}/{AFK_LIMIT})")
            session.advance_turn()

        await bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=session.field_message_id,
            reply_markup=build_field_keyboard(session)
        )

        # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å —Å–∞–º—É —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ ‚Äî –±–µ–∑ –æ–±—ë—Ä—Ç–∫–∏
        await start_turn_timer(bot, session)

    # –ó–∞–ø—É—Å–∫ —Å–∞–º–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ (–æ–¥–∏–Ω —Ä–∞–∑)
    session.afk_task = create_task(timer())

async def append_to_dice_log(bot, session, new_line: str):
    session.append_to_log(new_line)

    header = "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤ –∏ —Ö–æ–¥–æ–≤:\n"
    for idx, player in enumerate(session.players, start=1):
        dice = session.dice_rolls.get(player.user_id)
        if dice:
            _, d1, d2 = dice
            header += f"{player.display_name}: {dice_emoji(d1)}{dice_emoji(d2)} - {idx} —Ö–æ–¥\n"

    body = "\n".join(session.dice_log)
    new_text = header + ("\n" + body if body else "")

    if session.last_dice_log_text == new_text:
        return

    try:
        await bot.edit_message_text(
            chat_id=session.chat_id,
            message_id=session.dice_message_id,
            text=new_text
        )
    except TelegramRetryAfter as e:
        print(f"[append_to_dice_log] Flood control: wait {e.retry_after}s")
    except Exception as e:
        print(f"[append_to_dice_log] –û—à–∏–±–∫–∞: {e}")
    finally:
        # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        session.last_dice_log_text = new_text

def generate_scoreboard(session: GameSession) -> str:
    all_players = session.players + session.eliminated_players
    all_players.sort(key=lambda p: p.score, reverse=True)

    lines = ["\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—á—ë—Ç–∞:"]
    for idx, player in enumerate(all_players, 1):
        lines.append(f"{idx}. {player.display_name}: {player.score} –æ—á–∫.")
    return "\n".join(lines)

async def append_multiple_to_dice_log(bot, session, lines: list[str]):
    changed = False
    for line in lines:
        if line:  # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            session.append_to_log(line)
            changed = True

    if not changed:
        return

    header = "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤ –∏ —Ö–æ–¥–æ–≤:\n"
    for idx, player in enumerate(session.players, start=1):
        dice = session.dice_rolls.get(player.user_id)
        if dice:
            _, d1, d2 = dice
            header += f"{player.display_name}: {dice_emoji(d1)}{dice_emoji(d2)} - {idx} —Ö–æ–¥\n"

    body = "\n".join(session.dice_log)
    new_text = header + ("\n" + body if body else "")

    if session.last_dice_log_text == new_text:
        return

    try:
        await bot.edit_message_text(
            chat_id=session.chat_id,
            message_id=session.dice_message_id,
            text=new_text
        )
    except TelegramRetryAfter as e:
        print(f"[append_multiple_to_dice_log] Flood control: wait {e.retry_after}s")
    except Exception as e:
        print(f"[append_multiple_to_dice_log] –û—à–∏–±–∫–∞: {e}")
    finally:
        session.last_dice_log_text = new_text  # –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –º—ã –æ–±–Ω–æ–≤–∏–º